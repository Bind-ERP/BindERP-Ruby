=begin
#Bind ERP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class ClientDetails
    attr_accessor :id

    attr_accessor :rfc

    attr_accessor :legal_name

    attr_accessor :commercial_name

    attr_accessor :credit_days

    attr_accessor :credit_amount

    attr_accessor :payment_method

    attr_accessor :creation_date

    attr_accessor :status

    attr_accessor :sales_contact

    attr_accessor :credit_contact

    attr_accessor :loctaion

    attr_accessor :comments

    attr_accessor :price_list

    attr_accessor :payment_term_type

    attr_accessor :email

    attr_accessor :telephones

    attr_accessor :number

    attr_accessor :account_number

    attr_accessor :default_discount

    attr_accessor :client_source

    attr_accessor :account

    attr_accessor :addresses


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'ID',
        :'rfc' => :'RFC',
        :'legal_name' => :'LegalName',
        :'commercial_name' => :'CommercialName',
        :'credit_days' => :'CreditDays',
        :'credit_amount' => :'CreditAmount',
        :'payment_method' => :'PaymentMethod',
        :'creation_date' => :'CreationDate',
        :'status' => :'Status',
        :'sales_contact' => :'SalesContact',
        :'credit_contact' => :'CreditContact',
        :'loctaion' => :'Loctaion',
        :'comments' => :'Comments',
        :'price_list' => :'PriceList',
        :'payment_term_type' => :'PaymentTermType',
        :'email' => :'Email',
        :'telephones' => :'Telephones',
        :'number' => :'Number',
        :'account_number' => :'AccountNumber',
        :'default_discount' => :'DefaultDiscount',
        :'client_source' => :'ClientSource',
        :'account' => :'Account',
        :'addresses' => :'Addresses'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'rfc' => :'String',
        :'legal_name' => :'String',
        :'commercial_name' => :'String',
        :'credit_days' => :'Integer',
        :'credit_amount' => :'Float',
        :'payment_method' => :'String',
        :'creation_date' => :'DateTime',
        :'status' => :'String',
        :'sales_contact' => :'String',
        :'credit_contact' => :'String',
        :'loctaion' => :'String',
        :'comments' => :'String',
        :'price_list' => :'String',
        :'payment_term_type' => :'String',
        :'email' => :'String',
        :'telephones' => :'String',
        :'number' => :'Integer',
        :'account_number' => :'String',
        :'default_discount' => :'Float',
        :'client_source' => :'String',
        :'account' => :'String',
        :'addresses' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'ID')
        self.id = attributes[:'ID']
      end

      if attributes.has_key?(:'RFC')
        self.rfc = attributes[:'RFC']
      end

      if attributes.has_key?(:'LegalName')
        self.legal_name = attributes[:'LegalName']
      end

      if attributes.has_key?(:'CommercialName')
        self.commercial_name = attributes[:'CommercialName']
      end

      if attributes.has_key?(:'CreditDays')
        self.credit_days = attributes[:'CreditDays']
      end

      if attributes.has_key?(:'CreditAmount')
        self.credit_amount = attributes[:'CreditAmount']
      end

      if attributes.has_key?(:'PaymentMethod')
        self.payment_method = attributes[:'PaymentMethod']
      end

      if attributes.has_key?(:'CreationDate')
        self.creation_date = attributes[:'CreationDate']
      end

      if attributes.has_key?(:'Status')
        self.status = attributes[:'Status']
      end

      if attributes.has_key?(:'SalesContact')
        self.sales_contact = attributes[:'SalesContact']
      end

      if attributes.has_key?(:'CreditContact')
        self.credit_contact = attributes[:'CreditContact']
      end

      if attributes.has_key?(:'Loctaion')
        self.loctaion = attributes[:'Loctaion']
      end

      if attributes.has_key?(:'Comments')
        self.comments = attributes[:'Comments']
      end

      if attributes.has_key?(:'PriceList')
        self.price_list = attributes[:'PriceList']
      end

      if attributes.has_key?(:'PaymentTermType')
        self.payment_term_type = attributes[:'PaymentTermType']
      end

      if attributes.has_key?(:'Email')
        self.email = attributes[:'Email']
      end

      if attributes.has_key?(:'Telephones')
        self.telephones = attributes[:'Telephones']
      end

      if attributes.has_key?(:'Number')
        self.number = attributes[:'Number']
      end

      if attributes.has_key?(:'AccountNumber')
        self.account_number = attributes[:'AccountNumber']
      end

      if attributes.has_key?(:'DefaultDiscount')
        self.default_discount = attributes[:'DefaultDiscount']
      end

      if attributes.has_key?(:'ClientSource')
        self.client_source = attributes[:'ClientSource']
      end

      if attributes.has_key?(:'Account')
        self.account = attributes[:'Account']
      end

      if attributes.has_key?(:'Addresses')
        if (value = attributes[:'Addresses']).is_a?(Array)
          self.addresses = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          rfc == o.rfc &&
          legal_name == o.legal_name &&
          commercial_name == o.commercial_name &&
          credit_days == o.credit_days &&
          credit_amount == o.credit_amount &&
          payment_method == o.payment_method &&
          creation_date == o.creation_date &&
          status == o.status &&
          sales_contact == o.sales_contact &&
          credit_contact == o.credit_contact &&
          loctaion == o.loctaion &&
          comments == o.comments &&
          price_list == o.price_list &&
          payment_term_type == o.payment_term_type &&
          email == o.email &&
          telephones == o.telephones &&
          number == o.number &&
          account_number == o.account_number &&
          default_discount == o.default_discount &&
          client_source == o.client_source &&
          account == o.account &&
          addresses == o.addresses
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, rfc, legal_name, commercial_name, credit_days, credit_amount, payment_method, creation_date, status, sales_contact, credit_contact, loctaion, comments, price_list, payment_term_type, email, telephones, number, account_number, default_discount, client_source, account, addresses].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
