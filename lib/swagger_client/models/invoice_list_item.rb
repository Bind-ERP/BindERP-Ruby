=begin
#Bind ERP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class InvoiceListItem
    attr_accessor :serie

    attr_accessor :date

    attr_accessor :number

    attr_accessor :uuid

    attr_accessor :expiration_date

    attr_accessor :client_id

    attr_accessor :client_name

    attr_accessor :rfc

    attr_accessor :cost

    attr_accessor :subtotal

    attr_accessor :discount

    attr_accessor :vat

    attr_accessor :ieps

    attr_accessor :isr_ret

    attr_accessor :vat_ret

    attr_accessor :total

    attr_accessor :payments

    attr_accessor :credit_notes

    attr_accessor :currency_id

    attr_accessor :location_id

    attr_accessor :warehouse_id

    attr_accessor :price_list_id

    attr_accessor :cfdiid

    attr_accessor :cfdi_use

    attr_accessor :exchange_rate

    attr_accessor :vat_ret_rate

    attr_accessor :comments

    attr_accessor :vat_rate

    attr_accessor :purchase_order

    attr_accessor :is_fiscal_invoice

    attr_accessor :show_ieps

    attr_accessor :status


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'serie' => :'Serie',
        :'date' => :'Date',
        :'number' => :'Number',
        :'uuid' => :'UUID',
        :'expiration_date' => :'ExpirationDate',
        :'client_id' => :'ClientID',
        :'client_name' => :'ClientName',
        :'rfc' => :'RFC',
        :'cost' => :'Cost',
        :'subtotal' => :'Subtotal',
        :'discount' => :'Discount',
        :'vat' => :'VAT',
        :'ieps' => :'IEPS',
        :'isr_ret' => :'ISRRet',
        :'vat_ret' => :'VATRet',
        :'total' => :'Total',
        :'payments' => :'Payments',
        :'credit_notes' => :'CreditNotes',
        :'currency_id' => :'CurrencyID',
        :'location_id' => :'LocationID',
        :'warehouse_id' => :'WarehouseID',
        :'price_list_id' => :'PriceListID',
        :'cfdiid' => :'CFDIID',
        :'cfdi_use' => :'CFDIUse',
        :'exchange_rate' => :'ExchangeRate',
        :'vat_ret_rate' => :'VATRetRate',
        :'comments' => :'Comments',
        :'vat_rate' => :'VATRate',
        :'purchase_order' => :'PurchaseOrder',
        :'is_fiscal_invoice' => :'IsFiscalInvoice',
        :'show_ieps' => :'ShowIEPS',
        :'status' => :'Status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'serie' => :'String',
        :'date' => :'DateTime',
        :'number' => :'Integer',
        :'uuid' => :'String',
        :'expiration_date' => :'DateTime',
        :'client_id' => :'String',
        :'client_name' => :'String',
        :'rfc' => :'String',
        :'cost' => :'Float',
        :'subtotal' => :'Float',
        :'discount' => :'Float',
        :'vat' => :'Float',
        :'ieps' => :'Float',
        :'isr_ret' => :'Float',
        :'vat_ret' => :'Float',
        :'total' => :'Float',
        :'payments' => :'Float',
        :'credit_notes' => :'Float',
        :'currency_id' => :'String',
        :'location_id' => :'String',
        :'warehouse_id' => :'String',
        :'price_list_id' => :'String',
        :'cfdiid' => :'String',
        :'cfdi_use' => :'Integer',
        :'exchange_rate' => :'Float',
        :'vat_ret_rate' => :'Float',
        :'comments' => :'String',
        :'vat_rate' => :'Float',
        :'purchase_order' => :'String',
        :'is_fiscal_invoice' => :'BOOLEAN',
        :'show_ieps' => :'BOOLEAN',
        :'status' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Serie')
        self.serie = attributes[:'Serie']
      end

      if attributes.has_key?(:'Date')
        self.date = attributes[:'Date']
      end

      if attributes.has_key?(:'Number')
        self.number = attributes[:'Number']
      end

      if attributes.has_key?(:'UUID')
        self.uuid = attributes[:'UUID']
      end

      if attributes.has_key?(:'ExpirationDate')
        self.expiration_date = attributes[:'ExpirationDate']
      end

      if attributes.has_key?(:'ClientID')
        self.client_id = attributes[:'ClientID']
      end

      if attributes.has_key?(:'ClientName')
        self.client_name = attributes[:'ClientName']
      end

      if attributes.has_key?(:'RFC')
        self.rfc = attributes[:'RFC']
      end

      if attributes.has_key?(:'Cost')
        self.cost = attributes[:'Cost']
      end

      if attributes.has_key?(:'Subtotal')
        self.subtotal = attributes[:'Subtotal']
      end

      if attributes.has_key?(:'Discount')
        self.discount = attributes[:'Discount']
      end

      if attributes.has_key?(:'VAT')
        self.vat = attributes[:'VAT']
      end

      if attributes.has_key?(:'IEPS')
        self.ieps = attributes[:'IEPS']
      end

      if attributes.has_key?(:'ISRRet')
        self.isr_ret = attributes[:'ISRRet']
      end

      if attributes.has_key?(:'VATRet')
        self.vat_ret = attributes[:'VATRet']
      end

      if attributes.has_key?(:'Total')
        self.total = attributes[:'Total']
      end

      if attributes.has_key?(:'Payments')
        self.payments = attributes[:'Payments']
      end

      if attributes.has_key?(:'CreditNotes')
        self.credit_notes = attributes[:'CreditNotes']
      end

      if attributes.has_key?(:'CurrencyID')
        self.currency_id = attributes[:'CurrencyID']
      end

      if attributes.has_key?(:'LocationID')
        self.location_id = attributes[:'LocationID']
      end

      if attributes.has_key?(:'WarehouseID')
        self.warehouse_id = attributes[:'WarehouseID']
      end

      if attributes.has_key?(:'PriceListID')
        self.price_list_id = attributes[:'PriceListID']
      end

      if attributes.has_key?(:'CFDIID')
        self.cfdiid = attributes[:'CFDIID']
      end

      if attributes.has_key?(:'CFDIUse')
        self.cfdi_use = attributes[:'CFDIUse']
      end

      if attributes.has_key?(:'ExchangeRate')
        self.exchange_rate = attributes[:'ExchangeRate']
      end

      if attributes.has_key?(:'VATRetRate')
        self.vat_ret_rate = attributes[:'VATRetRate']
      end

      if attributes.has_key?(:'Comments')
        self.comments = attributes[:'Comments']
      end

      if attributes.has_key?(:'VATRate')
        self.vat_rate = attributes[:'VATRate']
      end

      if attributes.has_key?(:'PurchaseOrder')
        self.purchase_order = attributes[:'PurchaseOrder']
      end

      if attributes.has_key?(:'IsFiscalInvoice')
        self.is_fiscal_invoice = attributes[:'IsFiscalInvoice']
      end

      if attributes.has_key?(:'ShowIEPS')
        self.show_ieps = attributes[:'ShowIEPS']
      end

      if attributes.has_key?(:'Status')
        self.status = attributes[:'Status']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          serie == o.serie &&
          date == o.date &&
          number == o.number &&
          uuid == o.uuid &&
          expiration_date == o.expiration_date &&
          client_id == o.client_id &&
          client_name == o.client_name &&
          rfc == o.rfc &&
          cost == o.cost &&
          subtotal == o.subtotal &&
          discount == o.discount &&
          vat == o.vat &&
          ieps == o.ieps &&
          isr_ret == o.isr_ret &&
          vat_ret == o.vat_ret &&
          total == o.total &&
          payments == o.payments &&
          credit_notes == o.credit_notes &&
          currency_id == o.currency_id &&
          location_id == o.location_id &&
          warehouse_id == o.warehouse_id &&
          price_list_id == o.price_list_id &&
          cfdiid == o.cfdiid &&
          cfdi_use == o.cfdi_use &&
          exchange_rate == o.exchange_rate &&
          vat_ret_rate == o.vat_ret_rate &&
          comments == o.comments &&
          vat_rate == o.vat_rate &&
          purchase_order == o.purchase_order &&
          is_fiscal_invoice == o.is_fiscal_invoice &&
          show_ieps == o.show_ieps &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [serie, date, number, uuid, expiration_date, client_id, client_name, rfc, cost, subtotal, discount, vat, ieps, isr_ret, vat_ret, total, payments, credit_notes, currency_id, location_id, warehouse_id, price_list_id, cfdiid, cfdi_use, exchange_rate, vat_ret_rate, comments, vat_rate, purchase_order, is_fiscal_invoice, show_ieps, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
