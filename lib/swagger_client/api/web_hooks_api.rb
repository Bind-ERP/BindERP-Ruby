=begin
#Bind ERP API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class WebHooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Suscribirse a un WebHook
    # 
    # @param new_web_hook_subscription 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def web_hooks_add_web_hook_subscriptions(new_web_hook_subscription, opts = {})
      data, _status_code, _headers = web_hooks_add_web_hook_subscriptions_with_http_info(new_web_hook_subscription, opts)
      return data
    end

    # Suscribirse a un WebHook
    # 
    # @param new_web_hook_subscription 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def web_hooks_add_web_hook_subscriptions_with_http_info(new_web_hook_subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebHooksApi.web_hooks_add_web_hook_subscriptions ..."
      end
      # verify the required parameter 'new_web_hook_subscription' is set
      if @api_client.config.client_side_validation && new_web_hook_subscription.nil?
        fail ArgumentError, "Missing the required parameter 'new_web_hook_subscription' when calling WebHooksApi.web_hooks_add_web_hook_subscriptions"
      end
      # resource path
      local_var_path = "/api/WebHookSubscriptions"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(new_web_hook_subscription)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebHooksApi#web_hooks_add_web_hook_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Borrar suscripción a WebHook
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def web_hooks_delete_web_hook_subscription_by_id(id, opts = {})
      web_hooks_delete_web_hook_subscription_by_id_with_http_info(id, opts)
      return nil
    end

    # Borrar suscripción a WebHook
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def web_hooks_delete_web_hook_subscription_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebHooksApi.web_hooks_delete_web_hook_subscription_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WebHooksApi.web_hooks_delete_web_hook_subscription_by_id"
      end
      # resource path
      local_var_path = "/api/WebHookSubscriptions"

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebHooksApi#web_hooks_delete_web_hook_subscription_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Editar suscripción a WebHook
    # 
    # @param web_hook_subscription 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def web_hooks_edit_web_hook_subscription(web_hook_subscription, opts = {})
      web_hooks_edit_web_hook_subscription_with_http_info(web_hook_subscription, opts)
      return nil
    end

    # Editar suscripción a WebHook
    # 
    # @param web_hook_subscription 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def web_hooks_edit_web_hook_subscription_with_http_info(web_hook_subscription, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebHooksApi.web_hooks_edit_web_hook_subscription ..."
      end
      # verify the required parameter 'web_hook_subscription' is set
      if @api_client.config.client_side_validation && web_hook_subscription.nil?
        fail ArgumentError, "Missing the required parameter 'web_hook_subscription' when calling WebHooksApi.web_hooks_edit_web_hook_subscription"
      end
      # resource path
      local_var_path = "/api/WebHookSubscriptions"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(web_hook_subscription)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebHooksApi#web_hooks_edit_web_hook_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Obtiene un ejemplo del modelo de datos que envía el WebHook.
    # 
    # @param event_id 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def web_hooks_get_web_hook_sample_data(event_id, opts = {})
      data, _status_code, _headers = web_hooks_get_web_hook_sample_data_with_http_info(event_id, opts)
      return data
    end

    # Obtiene un ejemplo del modelo de datos que envía el WebHook.
    # 
    # @param event_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def web_hooks_get_web_hook_sample_data_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebHooksApi.web_hooks_get_web_hook_sample_data ..."
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling WebHooksApi.web_hooks_get_web_hook_sample_data"
      end
      # resource path
      local_var_path = "/api/WebHooks/{eventID}".sub('{' + 'eventID' + '}', event_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebHooksApi#web_hooks_get_web_hook_sample_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Obtiene la lista de su suscripciones a WebHooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters the results, based on a Boolean condition.
    # @option opts [String] :orderby Sorts the results.
    # @option opts [Integer] :top Returns only the first n results.
    # @option opts [Integer] :skip Skips the first n results.
    # @return [WebHookSubscriptionPage]
    def web_hooks_get_web_hook_subscriptions(opts = {})
      data, _status_code, _headers = web_hooks_get_web_hook_subscriptions_with_http_info(opts)
      return data
    end

    # Obtiene la lista de su suscripciones a WebHooks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters the results, based on a Boolean condition.
    # @option opts [String] :orderby Sorts the results.
    # @option opts [Integer] :top Returns only the first n results.
    # @option opts [Integer] :skip Skips the first n results.
    # @return [Array<(WebHookSubscriptionPage, Fixnum, Hash)>] WebHookSubscriptionPage data, response status code and response headers
    def web_hooks_get_web_hook_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebHooksApi.web_hooks_get_web_hook_subscriptions ..."
      end
      # resource path
      local_var_path = "/api/WebHookSubscriptions"

      # query parameters
      query_params = {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebHookSubscriptionPage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebHooksApi#web_hooks_get_web_hook_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Obtiene la lista de WebHooks disponibles.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters the results, based on a Boolean condition.
    # @option opts [String] :orderby Sorts the results.
    # @option opts [Integer] :top Returns only the first n results.
    # @option opts [Integer] :skip Skips the first n results.
    # @return [WebHookPage]
    def web_hooks_get_web_hooks(opts = {})
      data, _status_code, _headers = web_hooks_get_web_hooks_with_http_info(opts)
      return data
    end

    # Obtiene la lista de WebHooks disponibles.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filters the results, based on a Boolean condition.
    # @option opts [String] :orderby Sorts the results.
    # @option opts [Integer] :top Returns only the first n results.
    # @option opts [Integer] :skip Skips the first n results.
    # @return [Array<(WebHookPage, Fixnum, Hash)>] WebHookPage data, response status code and response headers
    def web_hooks_get_web_hooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebHooksApi.web_hooks_get_web_hooks ..."
      end
      # resource path
      local_var_path = "/api/WebHooks"

      # query parameters
      query_params = {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebHookPage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebHooksApi#web_hooks_get_web_hooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
